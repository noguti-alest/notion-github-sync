name: Commit to Notion

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, closed]

jobs:
  sync-to-notion:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Get commit info
        id: commit_info
        run: |
          # Informações do commit
          AUTHOR="${{ github.event.head_commit.author.name || github.actor }}"
          BRANCH="${{ github.ref_name }}"
          DATE="${{ github.event.head_commit.timestamp || github.event.pull_request.created_at }}"
          MESSAGE="${{ github.event.head_commit.message || github.event.pull_request.title }}"
          LINK="${{ github.event.head_commit.url || github.event.pull_request.html_url }}"
          
          # Determinar tipo e status
          if [ "${{ github.event_name }}" == "push" ]; then
            TIPO="Push"
            STATUS="Push Direto"
          elif [ "${{ github.event_name }}" == "pull_request" ]; then
            TIPO="Pull Request"
            if [ "${{ github.event.action }}" == "closed" ] && [ "${{ github.event.pull_request.merged }}" == "true" ]; then
              STATUS="PR Mesclado"
            elif [ "${{ github.event.action }}" == "closed" ]; then
              STATUS="PR Fechado"
            else
              STATUS="PR Aberto"
            fi
          fi
          
          # Branch de destino
          DESTINO="${{ github.event.pull_request.base.ref || github.ref_name }}"
          
          # Atividade (primeira linha da mensagem)
          ATIVIDADE=$(echo "$MESSAGE" | head -n 1)
          
          # Descrição (mensagem completa)
          DESCRICAO="$MESSAGE"
          
          # Exportar variáveis
          echo "author=$AUTHOR" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "date=$DATE" >> $GITHUB_OUTPUT
          echo "atividade=$ATIVIDADE" >> $GITHUB_OUTPUT
          echo "descricao=$DESCRICAO" >> $GITHUB_OUTPUT
          echo "destino=$DESTINO" >> $GITHUB_OUTPUT
          echo "link=$LINK" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "tipo=$TIPO" >> $GITHUB_OUTPUT
      
      - name: Send to Notion
        uses: actions/github-script@v6
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          AUTHOR: ${{ steps.commit_info.outputs.author }}
          BRANCH: ${{ steps.commit_info.outputs.branch }}
          DATE: ${{ steps.commit_info.outputs.date }}
          ATIVIDADE: ${{ steps.commit_info.outputs.atividade }}
          DESCRICAO: ${{ steps.commit_info.outputs.descricao }}
          DESTINO: ${{ steps.commit_info.outputs.destino }}
          LINK: ${{ steps.commit_info.outputs.link }}
          STATUS: ${{ steps.commit_info.outputs.status }}
          TIPO: ${{ steps.commit_info.outputs.tipo }}
        with:
          script: |
            const https = require('https');
            
            // Validar se as secrets estão configuradas
            if (!process.env.NOTION_TOKEN) {
              throw new Error('❌ NOTION_TOKEN não configurado nas secrets do GitHub');
            }
            if (!process.env.NOTION_DATABASE_ID) {
              throw new Error('❌ NOTION_DATABASE_ID não configurado nas secrets do GitHub');
            }
            
            // Remover hífens do database_id se houver
            const databaseId = process.env.NOTION_DATABASE_ID.replace(/-/g, '');
            
            // Log de debug (sem expor o token completo)
            console.log('🔍 Enviando commit para Notion...');
            console.log('📊 Dados do commit:');
            console.log('  - Atividade:', process.env.ATIVIDADE);
            console.log('  - Autor:', process.env.AUTHOR);
            console.log('  - Branch:', process.env.BRANCH);
            console.log('  - Status:', process.env.STATUS);
            console.log('  - Tipo:', process.env.TIPO);
            console.log('  - Data:', process.env.DATE);
            console.log('  - Link:', process.env.LINK);
            
            // Função para limpar texto (remover quebras de linha problemáticas)
            const cleanText = (text) => {
              if (!text) return '';
              return text.replace(/[\r\n]+/g, ' ').substring(0, 2000);
            };
            
            // Construir objeto de propriedades
            const properties = {
              'Atividade': {
                title: [{ 
                  text: { content: cleanText(process.env.ATIVIDADE) || 'Sem título' } 
                }]
              },
              'Autor': {
                rich_text: [{ 
                  text: { content: cleanText(process.env.AUTHOR) || 'Desconhecido' } 
                }]
              },
              'Branch': {
                rich_text: [{ 
                  text: { content: cleanText(process.env.BRANCH) || 'main' } 
                }]
              },
              'Descrição': {
                rich_text: [{ 
                  text: { content: cleanText(process.env.DESCRICAO) || '' } 
                }]
              },
              'Destino': {
                rich_text: [{ 
                  text: { content: cleanText(process.env.DESTINO) || 'main' } 
                }]
              },
              'Status': {
                status: { name: process.env.STATUS || 'Push Direto' }
              },
              'Tipo': {
                select: { name: process.env.TIPO || 'Push' }
              }
            };
            
            // Adicionar Data se disponível
            if (process.env.DATE) {
              properties['Data'] = {
                date: { start: process.env.DATE }
              };
            }
            
            // Adicionar Link se disponível e válido
            if (process.env.LINK && process.env.LINK.startsWith('http')) {
              properties['Link'] = {
                url: process.env.LINK
              };
            }
            
            const payload = {
              parent: { database_id: databaseId },
              properties: properties
            };
            
            console.log('📦 Payload:', JSON.stringify(payload, null, 2));
            
            const data = JSON.stringify(payload);
            
            const options = {
              hostname: 'api.notion.com',
              path: '/v1/pages',
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
                'Content-Type': 'application/json',
                'Notion-Version': '2022-06-28',
                'Content-Length': data.length
              }
            };
            
            return new Promise((resolve, reject) => {
              const req = https.request(options, (res) => {
                let body = '';
                res.on('data', (chunk) => body += chunk);
                res.on('end', () => {
                  console.log(`📡 Status Code: ${res.statusCode}`);
                  console.log(`📄 Response Body: ${body}`);
                  
                  if (res.statusCode === 200 || res.statusCode === 201) {
                    console.log('✅ Commit enviado para Notion com sucesso!');
                    try {
                      resolve(JSON.parse(body));
                    } catch (e) {
                      console.log('⚠️ Resposta não é JSON, mas status foi sucesso');
                      resolve(body);
                    }
                  } else {
                    console.error('❌ Erro ao enviar para Notion');
                    console.error('Status:', res.statusCode);
                    console.error('Corpo da resposta:', body);
                    
                    let errorMsg = `Status ${res.statusCode}`;
                    try {
                      const errorObj = JSON.parse(body);
                      errorMsg += `: ${errorObj.message || JSON.stringify(errorObj)}`;
                    } catch (e) {
                      errorMsg += `: ${body}`;
                    }
                    
                    reject(new Error(errorMsg));
                  }
                });
              });
              
              req.on('error', (error) => {
                console.error('❌ Erro de rede:', error);
                reject(error);
              });
              
              req.write(data);
              req.end();
            });
